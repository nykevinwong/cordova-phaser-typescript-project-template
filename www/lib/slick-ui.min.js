define(["require", "exports"], function (require, exports) {

var UIPlugin = (function (Phaser, Object, w) {
var SlickUI = {};

var game;
var window = w;

SlickUI.setGame = function setGame(g)
{
    w.SlickUI = SlickUI;
    game = g;
}

SlickUI.namespace = function(namespace) {
    var parts = namespace.split(".");
    var context = SlickUI;
    for (var i in parts) {
        var part = parts[i];
        context = context[part] = context[part] ? context[part] : {};
    }
    return SlickUI[namespace];
};

Phaser.Plugin.SlickUI = function(game, parent) {
    Phaser.Plugin.call(this, game, parent);
    this.defaultRenderer = {
        button: "SlickUI.Element.Renderer.ButtonRenderer",
        checkbox: "SlickUI.Element.Renderer.CheckboxRenderer",
        panel: "SlickUI.Element.Renderer.PanelRenderer",
        slider: "SlickUI.Element.Renderer.SliderRenderer",
        text_field: "SlickUI.Element.Renderer.TextFieldRenderer",
        keyboard: "SlickUI.Element.Renderer.KeyboardRenderer",
        key: "SlickUI.Element.Renderer.KeyRenderer"
    };
    this.renderer = {};
};

Phaser.Plugin.SlickUI.prototype = Object.create(Phaser.Plugin.prototype);

Phaser.Plugin.SlickUI.prototype.constructor = Phaser.Plugin.SamplePlugin;

Phaser.Plugin.SlickUI.prototype.load = function(theme) {
    this.container = new SlickUI.Container.Container(this);
    var themePath = theme.replace(/\/[^\/]+$/, "/");
    game.load.json("slick-ui-theme", theme);
    game.load.resetLocked = true;
    game.load.start();
    var isQueued = false;
    var queueAssets = function() {
        if (!game.cache.checkJSONKey("slick-ui-theme") || isQueued) {
            return;
        }
        var theme = game.cache.getJSON("slick-ui-theme");
        for (var k in theme.images) {
            game.load.image("slick-ui-" + k, themePath + theme.images[k]);
        }
        for (k in theme.fonts) {
            game.load.bitmapFont(k, themePath + theme.fonts[k][0], themePath + theme.fonts[k][1]);
        }
        isQueued = true;
        game.load.onFileComplete.remove(queueAssets);
    };
    game.load.onFileComplete.add(queueAssets, this);
};

Phaser.Plugin.SlickUI.prototype.add = function(element) {
    return this.container.add(element);
};

Phaser.Plugin.SlickUI.prototype.getRenderer = function(name) {
    if (typeof this.renderer[name] != "undefined") {
        return this.renderer[name];
    }
    var theme = game.cache.getJSON("slick-ui-theme");
    var resolveObject = function(name) {
        var namespace = name.split(".");
        var context = window;
        for (var i in namespace) {
            context = context[namespace[i]];
        }
        return context;
    };
    if (typeof theme.renderer == "undefined" || typeof theme.renderer[name] == "undefined") {
        if (typeof this.defaultRenderer[name] == "undefined") {
            throw new Error("Trying to access undefined renderer '" + name + "'.");
        }
        return this.renderer[name] = new (resolveObject(this.defaultRenderer[name]))();
    }
    return this.renderer[name] = new (resolveObject(theme.renderer[name]))();
};

SlickUI.namespace("Container");

SlickUI.Container.Container = function(parent) {
    this.root = null;
    if (!(parent instanceof SlickUI.Container.Container)) {
        this.root = parent;
        parent = null;
    }
    this.parent = parent;
    this.children = [];
    this.displayGroup = game.add.group();
    if (parent) {
        this.root = parent.root;
        parent.displayGroup.add(this.displayGroup);
        this.x = parent.x;
        this.y = parent.y;
        this.width = parent.width;
        this.height = parent.height;
    } else {
        this.x = 0;
        this.y = 0;
        this.width = game.width;
        this.height = game.height;
    }
};

SlickUI.Container.Container.prototype.add = function(element) {
    element.setContainer(this);
    if (typeof element.init == "function") {
        element.init();
    }
    game.world.bringToTop(this.displayGroup);
    this.children.push(element);
    return element;
};

SlickUI.namespace("Element");

SlickUI.Element.Button = function(x, y, width, height) {
    this._x = x;
    this._y = y;
    this._offsetX = x;
    this._offsetY = y;
    this._width = width;
    this._height = height;
    this.container = null;
};

SlickUI.Element.Button.prototype.setContainer = function(container) {
    this.container = new SlickUI.Container.Container(container);
};

SlickUI.Element.Button.prototype.init = function() {
    var theme = game.cache.getJSON("slick-ui-theme");
    var x = this.container.x = this.container.parent.x + this._x;
    var y = this.container.y = this.container.parent.y + this._y;
    var width = this.container.width = Math.min(this.container.parent.width - this._x, this._width);
    var height = this.container.height = Math.min(this.container.parent.height - this._y, this._height);
    this.container.x += Math.round(theme.button["border-x"] / 2);
    this.container.y += Math.round(theme.button["border-y"] / 2);
    this.container.width -= theme.button["border-x"];
    this.container.height -= theme.button["border-y"];
    var renderedSprites = this.container.root.getRenderer("button").render(width, height);
    this.spriteOff = renderedSprites[0];
    this.spriteOn = renderedSprites[1];
    this.sprite = game.make.button(x, y);
    this.sprite.loadTexture(this.spriteOff.texture);
    this.container.displayGroup.add(this.sprite);
    this.sprite.x = x;
    this.sprite.y = y;
    this._offsetX = x;
    this._offsetY = y;
    this.sprite.fixedToCamera = true;
    var hover = false;
    this.sprite.events.onInputOver.add(function() {
        hover = true;
    }, this);
    this.sprite.events.onInputOut.add(function() {
        hover = false;
    }, this);
    this.sprite.events.onInputDown.add(function() {
        this.sprite.loadTexture(this.spriteOn.texture);
    }, this);
    this.sprite.events.onInputUp.add(function() {
        this.sprite.loadTexture(this.spriteOff.texture);
        if (!hover) {
            this.sprite.events.onInputUp.halt();
        }
    }, this);
    this.events = this.sprite.events;
};

SlickUI.Element.Button.prototype.add = function(element) {
    return this.container.add(element);
};

Object.defineProperty(SlickUI.Element.Button.prototype, "x", {
    get: function() {
        return this._x - this.container.parent.x;
    },
    set: function(value) {
        this._x = value;
        this.container.displayGroup.x = this.container.parent.x + value - this._offsetX;
    }
});

Object.defineProperty(SlickUI.Element.Button.prototype, "y", {
    get: function() {
        return this._y - this.container.parent.y;
    },
    set: function(value) {
        this._y = value;
        this.container.displayGroup.y = this.container.parent.y + value - this._offsetY;
    }
});

Object.defineProperty(SlickUI.Element.Button.prototype, "visible", {
    get: function() {
        return this.container.displayGroup.visible;
    },
    set: function(value) {
        this.container.displayGroup.visible = value;
    }
});

Object.defineProperty(SlickUI.Element.Button.prototype, "alpha", {
    get: function() {
        return this.container.displayGroup.alpha;
    },
    set: function(value) {
        this.container.displayGroup.alpha = value;
    }
});

Object.defineProperty(SlickUI.Element.Button.prototype, "width", {
    get: function() {
        return this.container.width;
    },
    set: function(value) {
        var theme = game.cache.getJSON("slick-ui-theme");
        this._width = Math.round(value + theme.button["border-x"]);
        this.sprite.destroy();
        this.init();
        this.container.displayGroup.sendToBack(this.sprite);
    }
});

Object.defineProperty(SlickUI.Element.Button.prototype, "height", {
    get: function() {
        return this.container.height;
    },
    set: function(value) {
        var theme = game.cache.getJSON("slick-ui-theme");
        this._height = Math.round(value + theme.button["border-y"]);
        this.sprite.destroy();
        this.init();
        this.container.displayGroup.sendToBack(this.sprite);
    }
});

SlickUI.namespace("Element");

SlickUI.Element.Checkbox = function(x, y, type) {
    this._x = x;
    this._y = y;
    this.container = null;
    this._checked = false;
    this.type = type;
    if (typeof type == "undefined") {
        this.type = SlickUI.Element.Checkbox.TYPE_CHECKBOX;
    }
};

SlickUI.Element.Checkbox.TYPE_CHECKBOX = 0;

SlickUI.Element.Checkbox.TYPE_RADIO = 1;

SlickUI.Element.Checkbox.TYPE_CROSS = 2;

SlickUI.Element.Checkbox.prototype.setContainer = function(container) {
    this.container = new SlickUI.Container.Container(container);
};

SlickUI.Element.Checkbox.prototype.init = function() {    
    var x = this.container.x = this.container.parent.x + this._x;
    var y = this.container.y = this.container.parent.y + this._y;
    var key;
    switch (this.type) {
      case SlickUI.Element.Checkbox.TYPE_RADIO:
        key = "radio";
        break;

      case SlickUI.Element.Checkbox.TYPE_CROSS:
        key = "cross";
        break;

      default:
        key = "check";
        break;
    }
    var sprites = this.container.root.getRenderer("checkbox").render(key);
    this.sprite = game.make.sprite(0, 0, sprites[0].texture);
    this.sprite.x = x;
    this.sprite.y = y;
    this._offsetX = x;
    this._offsetY = y;
    this._spriteOff = sprites[0];
    this._spriteOn = sprites[1];
    this.displayGroup = game.add.group();
    this.displayGroup.add(this.sprite);
    this.container.displayGroup.add(this.displayGroup);
    this.sprite.inputEnabled = true;
    this.sprite.fixedToCamera = true;
    this.input.useHandCursor = true;
    this.events.onInputDown.add(function() {
        this.checked = !this.checked;
    }, this);
};

SlickUI.Element.Checkbox.prototype.add = function(element) {
    return this.container.add(element);
};

Object.defineProperty(SlickUI.Element.Checkbox.prototype, "x", {
    get: function() {
        return this.displayGroup.x + this._x;
    },
    set: function(value) {
        this.displayGroup.x = value - this._x;
    }
});

Object.defineProperty(SlickUI.Element.Checkbox.prototype, "y", {
    get: function() {
        return this.displayGroup.y + this._y;
    },
    set: function(value) {
        this.displayGroup.y = value - this._y;
    }
});

Object.defineProperty(SlickUI.Element.Checkbox.prototype, "checked", {
    get: function() {
        return this._checked;
    },
    set: function(value) {
        this._checked = value;
        if (value) {
            this.sprite.loadTexture(this._spriteOn.texture);
        } else {
            this.sprite.loadTexture(this._spriteOff.texture);
        }
    }
});

Object.defineProperty(SlickUI.Element.Checkbox.prototype, "visible", {
    get: function() {
        return this.sprite.visible;
    },
    set: function(value) {
        this.sprite.visible = value;
    }
});

Object.defineProperty(SlickUI.Element.Checkbox.prototype, "alpha", {
    get: function() {
        return this.sprite.alpha;
    },
    set: function(value) {
        this.sprite.alpha = value;
    }
});

Object.defineProperty(SlickUI.Element.Checkbox.prototype, "events", {
    get: function() {
        return this.sprite.events;
    }
});

Object.defineProperty(SlickUI.Element.Checkbox.prototype, "input", {
    get: function() {
        return this.sprite.input;
    }
});

Object.defineProperty(SlickUI.Element.Checkbox.prototype, "width", {
    get: function() {
        return this.sprite.width;
    },
    set: function(value) {
        this.sprite.width = value;
    }
});

Object.defineProperty(SlickUI.Element.Checkbox.prototype, "height", {
    get: function() {
        return this.sprite.height;
    },
    set: function(value) {
        this.sprite.height = value;
    }
});

SlickUI.namespace("Element");

SlickUI.Element.DisplayObject = function(x, y, displayObject, width, height) {
    this._x = x;
    this._y = y;
    this._offsetX = x;
    this._offsetY = y;
    this.displayObject = displayObject;
    this.container = null;
    this._width = width;
    this._height = height;
    if (typeof width == "undefined") {
        this._width = game.width;
    }
    if (typeof height == "undefined") {
        this._height = game.height;
    }
};

SlickUI.Element.DisplayObject.prototype.setContainer = function(container) {
    this.container = new SlickUI.Container.Container(container);
};

SlickUI.Element.DisplayObject.prototype.init = function() {
    var x = this.container.x = this.container.parent.x + this._x;
    var y = this.container.y = this.container.parent.y + this._y;
    this.container.width = Math.min(this.container.parent.width - this._x, this._width);
    this.container.height = Math.min(this.container.parent.height - this._y, this._height);
    if (!this.displayObject instanceof Phaser.Sprite) {
        this.sprite = game.make.sprite(x, y, this.displayObject);
    } else {
        this.sprite = this.displayObject;
    }
    this.container.displayGroup.add(this.sprite);
    this.sprite.x = x;
    this.sprite.y = y;
    this._offsetX = x;
    this._offsetY = y;
    this.sprite.fixedToCamera = true;
};

SlickUI.Element.DisplayObject.prototype.add = function(element) {
    return this.container.add(element);
};

Object.defineProperty(SlickUI.Element.DisplayObject.prototype, "x", {
    get: function() {
        return this._x - this.container.parent.x;
    },
    set: function(value) {
        this._x = value;
        this.container.displayGroup.x = this.container.parent.x + value - this._offsetX;
    }
});

Object.defineProperty(SlickUI.Element.DisplayObject.prototype, "y", {
    get: function() {
        return this._y - this.container.parent.y;
    },
    set: function(value) {
        this._y = value;
        this.container.displayGroup.y = this.container.parent.y + value - this._offsetY;
    }
});

Object.defineProperty(SlickUI.Element.DisplayObject.prototype, "visible", {
    get: function() {
        return this.container.displayGroup.visible;
    },
    set: function(value) {
        this.container.displayGroup.visible = value;
    }
});

Object.defineProperty(SlickUI.Element.DisplayObject.prototype, "alpha", {
    get: function() {
        return this.container.displayGroup.alpha;
    },
    set: function(value) {
        this.container.displayGroup.alpha = value;
    }
});

Object.defineProperty(SlickUI.Element.DisplayObject.prototype, "inputEnabled", {
    get: function() {
        return this.sprite.inputEnabled;
    },
    set: function(value) {
        this.sprite.inputEnabled = value;
        if (value) {
            this.input = this.sprite.input;
        } else {
            this.input = null;
        }
    }
});

Object.defineProperty(SlickUI.Element.DisplayObject.prototype, "events", {
    get: function() {
        return this.sprite.events;
    }
});

Object.defineProperty(SlickUI.Element.DisplayObject.prototype, "width", {
    get: function() {
        return this.container.width;
    },
    set: function(value) {
        this._width = value;
        this.sprite.destroy();
        this.init();
        this.container.displayGroup.sendToBack(this.sprite);
    }
});

Object.defineProperty(SlickUI.Element.DisplayObject.prototype, "height", {
    get: function() {
        return this.container.height;
    },
    set: function(value) {
        this._height = value;
        this.sprite.destroy();
        this.init();
        this.container.displayGroup.sendToBack(this.sprite);
    }
});

SlickUI.namespace("Element");

SlickUI.Element.Panel = function(x, y, width, height) {
    this._x = x;
    this._y = y;
    this._offsetX = x;
    this._offsetY = y;
    this._width = width;
    this._height = height;
    this.container = null;
};

SlickUI.Element.Panel.prototype.setContainer = function(container) {
    this.container = new SlickUI.Container.Container(container);
};

SlickUI.Element.Panel.prototype.init = function() {
    var theme = game.cache.getJSON("slick-ui-theme");
    var x = this.container.x = this.container.parent.x + this._x;
    var y = this.container.y = this.container.parent.y + this._y;
    var width = this.container.width = Math.min(this.container.parent.width - this._x, this._width);
    var height = this.container.height = Math.min(this.container.parent.height - this._y, this._height);
    this.container.x += Math.round(theme.panel["border-x"] / 2);
    this.container.y += Math.round(theme.panel["border-y"] / 2);
    this.container.width -= theme.panel["border-x"];
    this.container.height -= theme.panel["border-y"];
    this._sprite = this.container.displayGroup.add(this.container.root.getRenderer("panel").render(width, height));
    this._sprite.x = x;
    this._sprite.y = y;
    this._sprite.fixedToCamera = true;
    this._offsetX = x;
    this._offsetY = y;
};

SlickUI.Element.Panel.prototype.add = function(element) {
    return this.container.add(element);
};

Object.defineProperty(SlickUI.Element.Panel.prototype, "x", {
    get: function() {
        return this._x - this.container.parent.x;
    },
    set: function(value) {
        this._x = value;
        this.container.displayGroup.x = this.container.parent.x + value - this._offsetX;
    }
});

Object.defineProperty(SlickUI.Element.Panel.prototype, "y", {
    get: function() {
        return this._y - this.container.parent.y;
    },
    set: function(value) {
        this._y = value;
        this.container.displayGroup.y = this.container.parent.y + value - this._offsetY;
    }
});

Object.defineProperty(SlickUI.Element.Panel.prototype, "visible", {
    get: function() {
        return this.container.displayGroup.visible;
    },
    set: function(value) {
        this.container.displayGroup.visible = value;
    }
});

Object.defineProperty(SlickUI.Element.Panel.prototype, "alpha", {
    get: function() {
        return this.container.displayGroup.alpha;
    },
    set: function(value) {
        this.container.displayGroup.alpha = value;
    }
});

Object.defineProperty(SlickUI.Element.Panel.prototype, "width", {
    get: function() {
        return this.container.width;
    },
    set: function(value) {
        var theme = game.cache.getJSON("slick-ui-theme");
        this._width = Math.round(value + theme.panel["border-x"]);
        this._sprite.destroy();
        this.init();
        this.container.displayGroup.sendToBack(this._sprite);
    }
});

Object.defineProperty(SlickUI.Element.Panel.prototype, "height", {
    get: function() {
        return this.container.height;
    },
    set: function(value) {
        var theme = game.cache.getJSON("slick-ui-theme");
        this._height = Math.round(value + theme.panel["border-y"]);
        this._sprite.destroy();
        this.init();
        this.container.displayGroup.sendToBack(this._sprite);
    }
});

SlickUI.namespace("Element.Renderer");

SlickUI.Element.Renderer.ButtonRenderer = function() {};

SlickUI.Element.Renderer.ButtonRenderer.prototype.render = function(width, height) {
    var theme = game.cache.getJSON("slick-ui-theme");
    var cutSprite = function(button) {
        var bmd = game.add.bitmapData(width, height);
        bmd.copyRect(button, new Phaser.Rectangle(0, 0, theme.button["border-x"], theme.button["border-y"]));
        bmd.copy(button, theme.button["border-x"] + 1, 0, 1, theme.button["border-y"], theme.button["border-x"], 0, width - theme.button["border-x"] * 2, theme.button["border-y"]);
        bmd.copyRect(button, new Phaser.Rectangle(button.width - theme.button["border-x"], 0, theme.button["border-x"], theme.button["border-y"]), width - theme.button["border-x"]);
        bmd.copy(button, 0, theme.button["border-y"] + 1, theme.button["border-x"], 1, 0, theme.button["border-y"], theme.button["border-x"], height - theme.button["border-y"] * 2);
        bmd.copy(button, button.width - theme.button["border-x"], theme.button["border-y"] + 1, theme.button["border-x"], 1, width - theme.button["border-x"], theme.button["border-y"], theme.button["border-x"], height - theme.button["border-y"] * 2);
        bmd.copyRect(button, new Phaser.Rectangle(0, button.height - theme.button["border-y"], theme.button["border-x"], theme.button["border-y"]), 0, height - theme.button["border-y"]);
        bmd.copyRect(button, new Phaser.Rectangle(button.width - theme.button["border-x"], button.height - theme.button["border-y"], theme.button["border-x"], theme.button["border-y"]), width - theme.button["border-x"], height - theme.button["border-y"]);
        bmd.copy(button, theme.button["border-x"] + 1, button.height - theme.button["border-y"], 1, theme.button["border-y"], theme.button["border-x"], height - theme.button["border-y"], width - theme.button["border-x"] * 2, theme.button["border-y"]);
        bmd.copy(button, theme.button["border-x"], theme.button["border-y"], 1, 1, theme.button["border-x"], theme.button["border-y"], width - theme.button["border-x"] * 2, height - theme.button["border-y"] * 2);
        return game.make.sprite(0, 0, bmd);
    };
    var off = cutSprite(game.make.sprite(0, 0, "slick-ui-button_off"));
    var on = cutSprite(game.make.sprite(0, 0, "slick-ui-button_on"));
    return [ off, on ];
};

SlickUI.namespace("Element.Renderer");

SlickUI.Element.Renderer.CheckboxRenderer = function() {};

SlickUI.Element.Renderer.CheckboxRenderer.prototype.render = function(key) {
    var off = game.make.sprite(0, 0, "slick-ui-" + key + "_off");
    var on = game.make.sprite(0, 0, "slick-ui-" + key + "_on");
    return [ off, on ];
};

SlickUI.namespace("Element.Renderer");

SlickUI.Element.Renderer.KeyRenderer = function() {};

SlickUI.Element.Renderer.KeyRenderer.prototype.render = function(width, height) {
    var graphicsUp = game.make.graphics(0, 0);
    graphicsUp.beginFill(13619151);
    graphicsUp.drawRoundedRect(0, 0, width, height, 5);
    graphicsUp.beginFill(16777215);
    graphicsUp.drawRoundedRect(1, 1, width - 2, height - 2, 5);
    var graphicsDown = game.make.graphics(0, 0);
    graphicsDown.beginFill(1542840);
    graphicsDown.drawRoundedRect(0, 0, width, height, 5);
    graphicsDown.beginFill(2074593);
    graphicsDown.drawRoundedRect(1, 1, width - 2, height - 2, 5);
    var keyUp = game.make.sprite(0, 0, graphicsUp.generateTexture());
    var keyDown = game.make.sprite(0, 0, graphicsDown.generateTexture());
    return [ keyUp, keyDown ];
};

SlickUI.namespace("Element.Renderer");

SlickUI.Element.Renderer.KeyboardRenderer = function() {};

SlickUI.Element.Renderer.KeyboardRenderer.prototype.render = function(height) {
    var bmd = game.make.bitmapData(game.width, height);
    bmd.ctx.beginPath();
    bmd.ctx.rect(0, 0, game.width, height);
    bmd.ctx.fillStyle = "#cccccc";
    bmd.ctx.fill();
    bmd.ctx.beginPath();
    bmd.ctx.rect(0, 2, game.width, height - 2);
    bmd.ctx.fillStyle = "#f0f0f0";
    bmd.ctx.fill();
    return game.make.sprite(0, 0, bmd);
};

SlickUI.namespace("Element.Renderer");

SlickUI.Element.Renderer.PanelRenderer = function() {};

SlickUI.Element.Renderer.PanelRenderer.prototype.render = function(width, height) {
    var theme = game.cache.getJSON("slick-ui-theme");
    var bmd = game.add.bitmapData(game.width, game.height);
    var panel = game.make.sprite(0, 0, "slick-ui-panel");
    bmd.copyRect(panel, new Phaser.Rectangle(0, 0, theme.panel["border-x"], theme.panel["border-y"]));
    bmd.copy(panel, theme.panel["border-x"] + 1, 0, 1, theme.panel["border-y"], theme.panel["border-x"], 0, width - theme.panel["border-x"] * 2, theme.panel["border-y"]);
    bmd.copyRect(panel, new Phaser.Rectangle(panel.width - theme.panel["border-x"], 0, theme.panel["border-x"], theme.panel["border-y"]), width - theme.panel["border-x"]);
    bmd.copy(panel, 0, theme.panel["border-y"] + 1, theme.panel["border-x"], 1, 0, theme.panel["border-y"], theme.panel["border-x"], height - theme.panel["border-y"] * 2);
    bmd.copy(panel, panel.width - theme.panel["border-x"], theme.panel["border-y"] + 1, theme.panel["border-x"], 1, width - theme.panel["border-x"], theme.panel["border-y"], theme.panel["border-x"], height - theme.panel["border-y"] * 2);
    bmd.copyRect(panel, new Phaser.Rectangle(0, panel.height - theme.panel["border-y"], theme.panel["border-x"], theme.panel["border-y"]), 0, height - theme.panel["border-y"]);
    bmd.copyRect(panel, new Phaser.Rectangle(panel.width - theme.panel["border-x"], panel.height - theme.panel["border-y"], theme.panel["border-x"], theme.panel["border-y"]), width - theme.panel["border-x"], height - theme.panel["border-y"]);
    bmd.copy(panel, theme.panel["border-x"] + 1, panel.height - theme.panel["border-y"], 1, theme.panel["border-y"], theme.panel["border-x"], height - theme.panel["border-y"], width - theme.panel["border-x"] * 2, theme.panel["border-y"]);
    bmd.copy(panel, theme.panel["border-x"], theme.panel["border-y"], 1, 1, theme.panel["border-x"], theme.panel["border-y"], width - theme.panel["border-x"] * 2, height - theme.panel["border-y"] * 2);
    return game.make.sprite(0, 0, bmd);
};

SlickUI.namespace("Element.Renderer");

SlickUI.Element.Renderer.SliderRenderer = function() {};

SlickUI.Element.Renderer.SliderRenderer.prototype.render = function(width) {
    var theme = game.cache.getJSON("slick-ui-theme");
    var sprite_base = game.make.sprite(0, 0, "slick-ui-slider_base");
    var sprite_end = game.make.sprite(0, 0, "slick-ui-slider_end");
    var bmd = game.add.bitmapData(width, sprite_end.height);
    bmd.copy(sprite_base, 0, 0, 1, sprite_base.height, 0, Math.round(sprite_end.height / 4), width, sprite_base.height);
    bmd.copy(sprite_end, 0, 0, sprite_end.width, sprite_end.height, 0, 0, sprite_end.width, sprite_end.height);
    bmd.copy(sprite_end, 0, 0, sprite_end.width, sprite_end.height, width - sprite_end.width, 0, sprite_end.width, sprite_end.height);
    var handle_off = game.make.sprite(0, 0, "slick-ui-slider_handle_off");
    var handle_on = game.make.sprite(0, 0, "slick-ui-slider_handle_on");
    sprite_base = game.make.sprite(0, 0, bmd);
    return [ sprite_base, handle_off, handle_on ];
};

SlickUI.namespace("Element.Renderer");

SlickUI.Element.Renderer.TextFieldRenderer = function() {};

SlickUI.Element.Renderer.TextFieldRenderer.prototype.render = function(width, height) {
    var theme = game.cache.getJSON("slick-ui-theme");
    var bmd = game.add.bitmapData(width, height);
    var textField = game.make.sprite(0, 0, "slick-ui-text_field");
    bmd.copyRect(textField, new Phaser.Rectangle(0, 0, theme.text_field["border-x"], theme.text_field["border-y"]));
    bmd.copy(textField, theme.text_field["border-x"] + 1, 0, 1, theme.text_field["border-y"], theme.text_field["border-x"], 0, width - theme.text_field["border-x"] * 2, theme.text_field["border-y"]);
    bmd.copyRect(textField, new Phaser.Rectangle(textField.width - theme.text_field["border-x"], 0, theme.text_field["border-x"], theme.text_field["border-y"]), width - theme.text_field["border-x"]);
    bmd.copy(textField, 0, theme.text_field["border-y"] + 1, theme.text_field["border-x"], 1, 0, theme.text_field["border-y"], theme.text_field["border-x"], height - theme.text_field["border-y"] * 2);
    bmd.copy(textField, textField.width - theme.text_field["border-x"], theme.text_field["border-y"] + 1, theme.text_field["border-x"], 1, width - theme.text_field["border-x"], theme.text_field["border-y"], theme.text_field["border-x"], height - theme.text_field["border-y"] * 2);
    bmd.copyRect(textField, new Phaser.Rectangle(0, textField.height - theme.text_field["border-y"], theme.text_field["border-x"], theme.text_field["border-y"]), 0, height - theme.text_field["border-y"]);
    bmd.copyRect(textField, new Phaser.Rectangle(textField.width - theme.text_field["border-x"], textField.height - theme.text_field["border-y"], theme.text_field["border-x"], theme.text_field["border-y"]), width - theme.text_field["border-x"], height - theme.text_field["border-y"]);
    bmd.copy(textField, theme.text_field["border-x"] + 1, textField.height - theme.text_field["border-y"], 1, theme.text_field["border-y"], theme.text_field["border-x"], height - theme.text_field["border-y"], width - theme.text_field["border-x"] * 2, theme.text_field["border-y"]);
    bmd.copy(textField, theme.text_field["border-x"], theme.text_field["border-y"], 1, 1, theme.text_field["border-x"], theme.text_field["border-y"], width - theme.text_field["border-x"] * 2, height - theme.text_field["border-y"] * 2);
    return game.make.sprite(0, 0, bmd);
};

SlickUI.namespace("Element");

SlickUI.Element.Slider = function(x, y, size, value) {
    this._x = x;
    this._y = y;
    this._width = size;
    this._value = value;
    this.container = null;
    if (typeof value == "undefined") {
        this._value = 1;
    }
};

SlickUI.Element.Slider.prototype.setContainer = function(container) {
    this.container = container;
};

SlickUI.Element.Slider.prototype.init = function() {
    var theme = game.cache.getJSON("slick-ui-theme");
    this.onDragStart = new Phaser.Signal();
    this.onDrag = new Phaser.Signal();
    this.onDragStop = new Phaser.Signal();
    var x = this.container.x + this._x;
    var y = this.container.y + this._y;
    var width = Math.min(this.container.width - this._x, this._width);
    var initialPosition = Math.min(1, Math.max(0, this._value)) * width + x;
    var renderedSprites = this.container.root.getRenderer("slider").render(width);
    var sprite_base = renderedSprites[0];
    var handle_off = renderedSprites[1];
    var handle_on = renderedSprites[2];
    sprite_base.x = x;
    sprite_base.y = y;
    sprite_handle = game.make.sprite(initialPosition, y, handle_off.texture);
    sprite_handle.anchor.setTo(.5);
    sprite_handle.inputEnabled = true;
    sprite_handle.input.useHandCursor = true;
    var dragging = false;
    sprite_handle.events.onInputDown.add(function() {
        sprite_handle.loadTexture(handle_on.texture);
        dragging = true;
        this.onDragStart.dispatch((sprite_handle.x - x) / width);
    }, this);
    sprite_handle.events.onInputUp.add(function() {
        sprite_handle.loadTexture(handle_off.texture);
        dragging = false;
        this.onDragStop.dispatch((sprite_handle.x - x) / width);
    }, this);
    game.input.addMoveCallback(function(pointer, pointer_x) {
        if (!dragging) {
            return;
        }
        sprite_handle.x = Math.min(x + width, Math.max(x, pointer_x - this.container.displayGroup.x));
        this.onDrag.dispatch((sprite_handle.x - x) / width);
    }, this);
    this.container.displayGroup.add(sprite_base);
    this.container.displayGroup.add(sprite_handle);
};

SlickUI.namespace("Element");

SlickUI.Element.Text = function(x, y, value, size, font, width, height) {
    this._x = x;
    this._y = y;
    this._value = value;
    this.width = width;
    this.height = height;
    this.font = font;
    this.size = size;
    if (typeof this.width == "undefined") {
        this.width = game.width;
    }
    if (typeof this.height == "undefined") {
        this.height = game.height;
    }
    if (typeof this.size == "undefined") {
        this.size = 16;
    }
    this.container = null;
};

SlickUI.Element.Text.prototype.setContainer = function(container) {
    this.container = container;
};

SlickUI.Element.Text.prototype.reset = function(x, y, recalculateWidth) {
    var width, height;
    width = Math.min(this.container.width - x, this.width);
    height = Math.min(this.container.height - y, this.height);
    if (typeof this.text != "undefined") {
        if (recalculateWidth === false) {
            width = this.text.maxWidth;
            height = this.text.maxHeight;
        }
        this.text.destroy();
    }
    x += this.container.x;
    y += this.container.y;
    this.text = game.make.bitmapText(x, y, this.font, this._value, this.size);
    this.text.maxWidth = width;
    this.text.maxHeight = height;
    this.container.displayGroup.add(this.text);
    this.text.fixedToCamera = true;
};

SlickUI.Element.Text.prototype.init = function() {
    var theme = game.cache.getJSON("slick-ui-theme");
    if (typeof this.font == "undefined") {
        this.font = Object.keys(theme.fonts)[Object.keys(theme.fonts).length - 1];
    }
    this.reset(this._x, this._y);
};

SlickUI.Element.Text.prototype.centerHorizontally = function() {
    this.text.cameraOffset.x = this.text.maxWidth / 2 - this.text.width / 2 + this.container.x;
    return this;
};

SlickUI.Element.Text.prototype.centerVertically = function() {
    var theme = game.cache.getJSON("slick-ui-theme");
    this.text.cameraOffset.y = this.container.height / 2 - this.text.height / 2 - Math.round(theme.button["border-y"] / 2) + this.container.y;
    return this;
};

SlickUI.Element.Text.prototype.center = function() {
    this.centerHorizontally();
    this.centerVertically();
    return this;
};

Object.defineProperty(SlickUI.Element.Text.prototype, "x", {
    get: function() {
        return this.text.cameraOffset.x - this.container.x;
    },
    set: function(value) {
        this.text.cameraOffset.x = value + this.container.x;
    }
});

Object.defineProperty(SlickUI.Element.Text.prototype, "y", {
    get: function() {
        return this.text.cameraOffset.y - this.container.y;
    },
    set: function(value) {
        this.text.cameraOffset.y = value + this.container.y;
    }
});

Object.defineProperty(SlickUI.Element.Text.prototype, "value", {
    get: function() {
        return this.text.text;
    },
    set: function(value) {
        this.text.text = value;
    }
});

SlickUI.namespace("Element");

SlickUI.Element.TextField = function(x, y, width, height, maxChars) {
    if (typeof maxChars == "undefined") {
        maxChars = 7;
    }
    this._x = x;
    this._y = y;
    this._offsetX = x;
    this._offsetY = y;
    this._width = width;
    this._height = height;
    this.maxChars = maxChars;
    this.container = null;
    this.value = "";
    this.events = {
        onOK: new Phaser.Signal(),
        onToggle: new Phaser.Signal(),
        onKeyPress: new Phaser.Signal()
    };
};

SlickUI.Element.TextField.prototype.setContainer = function(container) {
    this.container = new SlickUI.Container.Container(container);
};

SlickUI.Element.TextField.prototype.init = function() {
    var theme = game.cache.getJSON("slick-ui-theme");
    var x = this.container.x = this.container.parent.x + this._x;
    var y = this.container.y = this.container.parent.y + this._y;
    var width = this.container.width = Math.min(this.container.parent.width - this._x, this._width);
    var height = this.container.height = Math.min(this.container.parent.height - this._y, this._height);
    this.container.x += Math.round(theme.text_field["border-x"] / 2);
    this.container.y += Math.round(theme.text_field["border-y"] / 2);
    this.container.width -= theme.text_field["border-x"];
    this.container.height -= theme.text_field["border-y"];
    this.sprite = game.make.sprite(x, y, this.container.root.getRenderer("text_field").render(width, height).texture);
    this.sprite.inputEnabled = true;
    this.sprite.input.useHandCursor = true;
    this.container.displayGroup.add(this.sprite);
    this.sprite.x = x;
    this.sprite.y = y;
    this._offsetX = x;
    this._offsetY = y;
    this.sprite.fixedToCamera = true;
    var hover = false;
    this.sprite.events.onInputOver.add(function() {
        hover = true;
    }, this);
    this.sprite.events.onInputOut.add(function() {
        hover = false;
    }, this);
    var kb = new SlickUI.Keyboard.Keyboard(this.container.root, Object.keys(theme.fonts)[Object.keys(theme.fonts).length - 1]);
    kb.group.cameraOffset.y = game.height;
    kb.group.visible = false;
    var kbAnimating = false;
    this.sprite.events.onInputDown.add(function() {
        if (kbAnimating) {
            return;
        }
        kbAnimating = true;
        if (!kb.group.visible) {
            kb.group.visible = true;
            game.add.tween(kb.group.cameraOffset).to({
                y: game.height - kb.height
            }, 500, Phaser.Easing.Exponential.Out, true).onComplete.add(function() {
                kbAnimating = false;
            });
            this.events.onToggle.dispatch(true);
        } else {
            game.add.tween(kb.group.cameraOffset).to({
                y: game.height
            }, 500, Phaser.Easing.Exponential.Out, true).onComplete.add(function() {
                kbAnimating = false;
                kb.group.visible = false;
            });
            this.events.onToggle.dispatch(false);
        }
    }, this);
    this.text = this.add(new SlickUI.Element.Text(8, 0, "A"));
    this.text.centerVertically();
    this.text.text.text = this.value;
    kb.events.onKeyPress.add(function(key) {
        if (key == "DEL") {
            this.value = this.value.substr(0, this.value.length - 1);
        } else {
            this.value = (this.value + key).substr(0, this.maxChars);
        }
        this.text.text.text = this.value;
        this.events.onKeyPress.dispatch(key);
    }, this);
    kb.events.onOK.add(function() {
        this.sprite.events.onInputDown.dispatch();
        this.events.onOK.dispatch();
    }, this);
};

SlickUI.Element.TextField.prototype.add = function(element) {
    return this.container.add(element);
};

Object.defineProperty(SlickUI.Element.TextField.prototype, "x", {
    get: function() {
        return this._x - this.container.parent.x;
    },
    set: function(value) {
        this._x = value;
        this.container.displayGroup.x = this.container.parent.x + value - this._offsetX;
    }
});

Object.defineProperty(SlickUI.Element.TextField.prototype, "y", {
    get: function() {
        return this._y - this.container.parent.y;
    },
    set: function(value) {
        this._y = value;
        this.container.displayGroup.y = this.container.parent.y + value - this._offsetY;
    }
});

Object.defineProperty(SlickUI.Element.TextField.prototype, "visible", {
    get: function() {
        return this.container.displayGroup.visible;
    },
    set: function(value) {
        this.container.displayGroup.visible = value;
    }
});

Object.defineProperty(SlickUI.Element.TextField.prototype, "alpha", {
    get: function() {
        return this.container.displayGroup.alpha;
    },
    set: function(value) {
        this.container.displayGroup.alpha = value;
    }
});

Object.defineProperty(SlickUI.Element.TextField.prototype, "width", {
    get: function() {
        return this.container.width;
    },
    set: function(value) {
        var theme = game.cache.getJSON("slick-ui-theme");
        this._width = Math.round(value + theme.text_field["border-x"]);
        this.sprite.destroy();
        this.init();
        this.container.displayGroup.sendToBack(this.sprite);
    }
});

Object.defineProperty(SlickUI.Element.TextField.prototype, "height", {
    get: function() {
        return this.container.height;
    },
    set: function(value) {
        var theme = game.cache.getJSON("slick-ui-theme");
        this._height = Math.round(value + theme.text_field["border-y"]);
        this.sprite.destroy();
        this.init();
        this.container.displayGroup.sendToBack(this.sprite);
    }
});

SlickUI.namespace("Keyboard");

SlickUI.Keyboard.Key = function(plugin, x, y, width, height, font, fontSize, text) {
    this.group = game.add.group();
    this.font = font;
    this._x = x;
    this._y = y;
    this.plugin = plugin;
    this._width = width;
    this._height = height;
    this.fontSize = fontSize;
    this.text = text;
};

SlickUI.Keyboard.Key.prototype.init = function() {
    var sprites = this.plugin.getRenderer("key").render(this._width, this._height);
    var keyUp = sprites[0];
    var keyDown = sprites[1];
    var base = game.make.sprite(this._x, this._y, keyUp.texture);
    var hover = false;
    base.inputEnabled = true;
    base.input.useHandCursor = true;
    base.events.onInputDown.add(function() {
        base.loadTexture(keyDown.texture);
    });
    base.events.onInputUp.add(function() {
        base.loadTexture(keyUp.texture);
        if (!hover) {
            base.events.onInputUp.halt();
        }
    });
    base.events.onInputOver.add(function() {
        hover = true;
    }, this);
    base.events.onInputOut.add(function() {
        hover = false;
    }, this);
    var text = game.make.bitmapText(this._x, this._y, this.font, this.text, this.fontSize);
    text.x += this._width / 2 - text.width / 2;
    text.y += this._height / 2 - this.fontSize / 2 - 4;
    this.group.add(base);
    this.group.add(text);
    this.events = base.events;
};

SlickUI.namespace("Keyboard");

SlickUI.Keyboard.Keyboard = function(plugin, font, fontSize, initialize) {
    this.group = game.add.group();
    this.keyGroupLower = game.make.group();
    this.keyGroupUpper = game.make.group();
    this.keyGroupCurrent = this.keyGroupLower;
    this.keyGroupUpper.visible = false;
    this.group.fixedToCamera = true;
    this.font = font;
    this.plugin = plugin;
    this.fontSize = fontSize;
    this.height = 160;
    this.events = {
        onKeyPress: new Phaser.Signal(),
        onOK: new Phaser.Signal()
    };
    if (typeof fontSize == "undefined") {
        this.fontSize = 16;
    }
    if (false !== initialize) {
        this.create();
    }
};

SlickUI.Keyboard.Keyboard.prototype.create = function() {
    var base = this.plugin.getRenderer("keyboard").render(this.height);
    this.group.add(base);
    this.group.add(this.keyGroupLower);
    this.group.add(this.keyGroupUpper);
    var keyboardWidth = 440;
    var offsetX = Math.round(game.world.centerX - keyboardWidth / 2);
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX, 16, 32, 32, this.font, this.fontSize, "1"), this.group);
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 36, 16, 32, 32, this.font, this.fontSize, "2"), this.group);
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 72, 16, 32, 32, this.font, this.fontSize, "3"), this.group);
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 108, 16, 32, 32, this.font, this.fontSize, "4"), this.group);
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 144, 16, 32, 32, this.font, this.fontSize, "5"), this.group);
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 180, 16, 32, 32, this.font, this.fontSize, "6"), this.group);
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 216, 16, 32, 32, this.font, this.fontSize, "7"), this.group);
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 252, 16, 32, 32, this.font, this.fontSize, "8"), this.group);
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 288, 16, 32, 32, this.font, this.fontSize, "9"), this.group);
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 324, 16, 32, 32, this.font, this.fontSize, "0"), this.group);
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 360, 16, 64, 32, this.font, this.fontSize, "DEL"), this.group);
    offsetX += 16;
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX, 52, 32, 32, this.font, this.fontSize, "q"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 36, 52, 32, 32, this.font, this.fontSize, "w"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 72, 52, 32, 32, this.font, this.fontSize, "e"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 108, 52, 32, 32, this.font, this.fontSize, "r"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 144, 52, 32, 32, this.font, this.fontSize, "t"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 180, 52, 32, 32, this.font, this.fontSize, "y"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 216, 52, 32, 32, this.font, this.fontSize, "u"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 252, 52, 32, 32, this.font, this.fontSize, "i"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 288, 52, 32, 32, this.font, this.fontSize, "o"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 324, 52, 32, 32, this.font, this.fontSize, "p"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 360, 52, 32, 32, this.font, this.fontSize, "!"), this.group);
    offsetX += 16;
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX, 88, 32, 32, this.font, this.fontSize, "a"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 36, 88, 32, 32, this.font, this.fontSize, "s"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 72, 88, 32, 32, this.font, this.fontSize, "d"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 108, 88, 32, 32, this.font, this.fontSize, "f"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 144, 88, 32, 32, this.font, this.fontSize, "g"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 180, 88, 32, 32, this.font, this.fontSize, "h"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 216, 88, 32, 32, this.font, this.fontSize, "j"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 252, 88, 32, 32, this.font, this.fontSize, "k"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 288, 88, 32, 32, this.font, this.fontSize, "l"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 324, 88, 80, 32, this.font, this.fontSize, "UPPER"));
    offsetX += 16;
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX - 40, 124, 36, 32, this.font, this.fontSize, "OK"), this.group);
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX, 124, 32, 32, this.font, this.fontSize, "z"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 36, 124, 32, 32, this.font, this.fontSize, "x"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 72, 124, 32, 32, this.font, this.fontSize, "c"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 108, 124, 32, 32, this.font, this.fontSize, "v"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 144, 124, 32, 32, this.font, this.fontSize, "b"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 180, 124, 32, 32, this.font, this.fontSize, "n"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 216, 124, 32, 32, this.font, this.fontSize, "m"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 252, 124, 32, 32, this.font, this.fontSize, ","), this.group);
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 288, 124, 32, 32, this.font, this.fontSize, "."), this.group);
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 324, 124, 32, 32, this.font, this.fontSize, " "), this.group);
    offsetX -= 32;
    this.keyGroupCurrent = this.keyGroupUpper;
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX, 52, 32, 32, this.font, this.fontSize, "Q"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 36, 52, 32, 32, this.font, this.fontSize, "W"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 72, 52, 32, 32, this.font, this.fontSize, "E"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 108, 52, 32, 32, this.font, this.fontSize, "R"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 144, 52, 32, 32, this.font, this.fontSize, "T"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 180, 52, 32, 32, this.font, this.fontSize, "Y"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 216, 52, 32, 32, this.font, this.fontSize, "U"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 252, 52, 32, 32, this.font, this.fontSize, "I"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 288, 52, 32, 32, this.font, this.fontSize, "O"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 324, 52, 32, 32, this.font, this.fontSize, "P"));
    offsetX += 16;
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX, 88, 32, 32, this.font, this.fontSize, "A"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 36, 88, 32, 32, this.font, this.fontSize, "S"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 72, 88, 32, 32, this.font, this.fontSize, "D"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 108, 88, 32, 32, this.font, this.fontSize, "F"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 144, 88, 32, 32, this.font, this.fontSize, "G"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 180, 88, 32, 32, this.font, this.fontSize, "H"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 216, 88, 32, 32, this.font, this.fontSize, "J"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 252, 88, 32, 32, this.font, this.fontSize, "K"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 288, 88, 32, 32, this.font, this.fontSize, "L"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 324, 88, 80, 32, this.font, this.fontSize, "lower"));
    offsetX += 16;
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX, 124, 32, 32, this.font, this.fontSize, "Z"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 36, 124, 32, 32, this.font, this.fontSize, "X"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 72, 124, 32, 32, this.font, this.fontSize, "C"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 108, 124, 32, 32, this.font, this.fontSize, "V"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 144, 124, 32, 32, this.font, this.fontSize, "B"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 180, 124, 32, 32, this.font, this.fontSize, "N"));
    this.addKey(new SlickUI.Keyboard.Key(this.plugin, offsetX + 216, 124, 32, 32, this.font, this.fontSize, "M"));
};

SlickUI.Keyboard.Keyboard.prototype.addKey = function(key, group) {
    key.init();
    if (typeof group == "undefined") {
        group = this.keyGroupCurrent;
    }
    group.add(key.group);
    key.events.onInputUp.add(function() {
        if (key.text == "UPPER" || key.text == "lower") {
            this.toggleMode();
            return;
        }
        if (key.text == "OK") {
            this.events.onOK.dispatch();
            return;
        }
        this.events.onKeyPress.dispatch(key.text);
    }, this);
};

SlickUI.Keyboard.Keyboard.prototype.toggleMode = function() {
    this.keyGroupUpper.visible = !this.keyGroupUpper.visible;
    this.keyGroupLower.visible = !this.keyGroupLower.visible;
};

return SlickUI;
})(Phaser, window.Object, window);

return UIPlugin;
});
